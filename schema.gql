# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Person {
  id: ID!
  username: String!
  firstName: String!
  lastName: String
  email: String
  gender: String!
  birthDay: String
}

type User {
  id: ID!
  username: String!
  firstName: String!
  lastName: String
  email: String
  gender: String!
  birthDay: String
}

type Message {
  id: ID!
  content: String!
  sender: String!
  createdAt: DateTime!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

"""
DateTime in ISO 8601 format. 
	 
  The format is "YYYY-MM-DDTHH:mm:ss.sssZ", 
	 
  The letter "T" is used to separate the date and time components.  where "Z" indicates the UTC timezone. 
	  
  Example: "2023-09-13T15:30:00.000Z".
"""
scalar Date

type Query {
  getPerson(id: ID!): Person!
  getAllPersons: [Person!]!
  users: [User!]!
  user(id: String!): User!
}

type Mutation {
  createMessage(createMessageInput: CreateMessageInput!): Message!
  createPerson(input: InputPerson!): Person!
  updatePerson(id: ID!, input: UpdatePerson!): Person!
  deletePerson(id: ID!): Person!
  createUser(createUserInput: CreateUserInput!): User!
  updateUser(updateUserInput: UpdateUserInput!): User!
  removeUser(id: String!): User!
}

input CreateMessageInput {
  content: String!
  sender: String!
}

input InputPerson {
  username: String!
  firstName: String!
  lastName: String
  email: String
  gender: String!
  birthDay: String
}

input UpdatePerson {
  username: String
  firstName: String
  lastName: String
  email: String
  gender: String
  birthDay: String
}

input CreateUserInput {
  username: String!
  firstName: String!
  lastName: String
  email: String
  gender: String!
  birthDay: String
}

input UpdateUserInput {
  username: String
  firstName: String
  lastName: String
  email: String
  gender: String
  birthDay: String
  id: String!
}

type Subscription {
  messageCreated: Message!
}